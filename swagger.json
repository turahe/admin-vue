{
  "swagger": "2.0",
  "info": {
    "description": "A comprehensive RESTful API built with Go, Fiber, and PostgreSQL using Hexagonal Architecture",
    "title": "Go RESTful API - Hexagonal Architecture",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "name": "API Support",
      "url": "http://www.swagger.io/support",
      "email": "support@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0"
  },
  "host": "localhost:8000",
  "basePath": "/api/v1",
  "paths": {
    "/api/v1/addressables/{addressable_type}/{addressable_id}/addresses": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all addresses for a specific user or organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Get addresses by addressable entity",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Addressable entity ID",
            "name": "addressable_id",
            "in": "path",
            "required": true
          },
          {
            "enum": ["user", "organization"],
            "type": "string",
            "description": "Addressable entity type",
            "name": "addressable_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses found",
            "schema": {
              "$ref": "#/definitions/responses.AddressCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addressables/{addressable_type}/{addressable_id}/addresses/primary": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve the primary address for a specific user or organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Get primary address by addressable entity",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Addressable entity ID",
            "name": "addressable_id",
            "in": "path",
            "required": true
          },
          {
            "enum": ["user", "organization"],
            "type": "string",
            "description": "Addressable entity type",
            "name": "addressable_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Primary address found",
            "schema": {
              "$ref": "#/definitions/responses.AddressResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Primary address not found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addressables/{addressable_type}/{addressable_id}/addresses/type/{address_type}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve addresses for a specific user or organization filtered by address type",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Get addresses by addressable entity and type",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Addressable entity ID",
            "name": "addressable_id",
            "in": "path",
            "required": true
          },
          {
            "enum": ["user", "organization"],
            "type": "string",
            "description": "Addressable entity type",
            "name": "addressable_type",
            "in": "path",
            "required": true
          },
          {
            "enum": ["home", "work", "billing", "shipping", "other"],
            "type": "string",
            "description": "Address type",
            "name": "address_type",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses found",
            "schema": {
              "$ref": "#/definitions/responses.AddressCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new address for a user or organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Create a new address",
        "parameters": [
          {
            "description": "Address creation request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateAddressRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Address created successfully",
            "schema": {
              "$ref": "#/definitions/responses.AddressResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/search/city": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search for addresses in a specific city with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Search addresses by city",
        "parameters": [
          {
            "type": "string",
            "description": "City name to search for",
            "name": "city",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses found",
            "schema": {
              "$ref": "#/definitions/responses.AddressCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/search/country": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search for addresses in a specific country with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Search addresses by country",
        "parameters": [
          {
            "type": "string",
            "description": "Country name to search for",
            "name": "country",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses found",
            "schema": {
              "$ref": "#/definitions/responses.AddressCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/search/postal-code": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search for addresses with a specific postal code with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Search addresses by postal code",
        "parameters": [
          {
            "type": "string",
            "description": "Postal code to search for",
            "name": "postal_code",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses found",
            "schema": {
              "$ref": "#/definitions/responses.AddressCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/search/state": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search for addresses in a specific state with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Search addresses by state",
        "parameters": [
          {
            "type": "string",
            "description": "State name to search for",
            "name": "state",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Addresses found",
            "schema": {
              "$ref": "#/definitions/responses.AddressCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve an address by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Get address by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Address ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Address found",
            "schema": {
              "$ref": "#/definitions/responses.AddressResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid address ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Address not found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing address with new information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Update an address",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Address ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Address update request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.AddressResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Address does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete an address by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Delete an address",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Address ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Address deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid address ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/{id}/primary": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Set a specific address as the primary address for an addressable entity",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Set address as primary",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Address ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Set primary address request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SetPrimaryAddressRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address set as primary successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/addresses/{id}/type": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the type of an address",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["addresses"],
        "summary": "Set address type",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Address ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Set address type request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SetAddressTypeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Address type updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/roles/{role_id}/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all users assigned to a specific role with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication \u0026 Authorization"],
        "summary": "Get role users",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "role_id",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Role users retrieved successfully",
            "schema": {
              "$ref": "#/definitions/responses.RoleUserCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid role ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/roles/{role_id}/users/count": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Get the total number of users assigned to a specific role",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication \u0026 Authorization"],
        "summary": "Get user count for role",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User count for role retrieved successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid role ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all taxonomies with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get all taxonomies",
        "parameters": [
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomies found",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid pagination parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new taxonomy with optional parent taxonomy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Create a new taxonomy",
        "parameters": [
          {
            "description": "Taxonomy creation request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateTaxonomyRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Taxonomy created successfully",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyResourceResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/hierarchy": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve the complete taxonomy hierarchy tree",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy hierarchy",
        "responses": {
          "200": {
            "description": "Taxonomy hierarchy found",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyCollectionResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/root": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all root taxonomies (taxonomies without parent)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get root taxonomies",
        "responses": {
          "200": {
            "description": "Root taxonomies found",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyCollectionResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/search": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search taxonomies by name, slug, or description with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Search taxonomies",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of results to return (default: 10)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 0,
            "description": "Number of results to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomies found",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Search query is required",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/search/advanced": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search taxonomies with advanced pagination and sorting options",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Search taxonomies with pagination",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 1,
            "description": "Page number (default: 1)",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Items per page (default: 10, max: 100)",
            "name": "per_page",
            "in": "query"
          },
          {
            "type": "string",
            "default": "record_left",
            "description": "Sort field (default: record_left)",
            "name": "sort_by",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "Sort descending (default: false)",
            "name": "sort_desc",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomies with pagination",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/pagination.TaxonomySearchResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/slug/{slug}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a taxonomy by its slug identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy by slug",
        "parameters": [
          {
            "type": "string",
            "description": "Taxonomy slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy found",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Slug is required",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Taxonomy not found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a taxonomy by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy found",
            "schema": {
              "$ref": "#/definitions/responses.TaxonomyResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid taxonomy ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Taxonomy not found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing taxonomy with new information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Update a taxonomy",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Taxonomy update request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateTaxonomyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy updated successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/entities.Taxonomy"
                    }
                  }
                }
              ]
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a taxonomy by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Delete a taxonomy",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid taxonomy ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/{id}/ancestors": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all ancestors of a taxonomy (parent, grandparent, etc.)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy ancestors",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy ancestors found",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/entities.Taxonomy"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request - Invalid taxonomy ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/{id}/children": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve direct children of a taxonomy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy children",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy children found",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/entities.Taxonomy"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request - Invalid taxonomy ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/{id}/descendants": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all descendants of a taxonomy (children, grandchildren, etc.)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy descendants",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy descendants found",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/entities.Taxonomy"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request - Invalid taxonomy ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/taxonomies/{id}/siblings": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all siblings of a taxonomy (taxonomies with the same parent)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["taxonomies"],
        "summary": "Get taxonomy siblings",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Taxonomy ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy siblings found",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/entities.Taxonomy"
                      }
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request - Invalid taxonomy ID format",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/roles": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all roles assigned to a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication \u0026 Authorization"],
        "summary": "Get user roles",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User roles retrieved successfully",
            "schema": {
              "$ref": "#/definitions/responses.UserRoleCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/roles/{role_id}": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Assign a specific role to a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication \u0026 Authorization"],
        "summary": "Assign role to user",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Role assigned to user successfully",
            "schema": {
              "$ref": "#/definitions/responses.UserRoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID or role ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Remove a specific role from a user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication \u0026 Authorization"],
        "summary": "Remove role from user",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Role removed from user successfully",
            "schema": {
              "$ref": "#/definitions/responses.UserRoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID or role ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/roles/{role_id}/check": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Check if a specific user has a specific role",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["Authentication \u0026 Authorization"],
        "summary": "Check if user has role",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "role_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Role check completed successfully",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID or role ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/forget-password": {
      "post": {
        "description": "Send a password reset email with OTP",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["auth"],
        "summary": "Request password reset",
        "parameters": [
          {
            "description": "Password reset request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.ForgetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset email sent",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "description": "Authenticate a user with username and password",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["auth"],
        "summary": "User login",
        "parameters": [
          {
            "description": "Login credentials",
            "name": "credentials",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.LoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Login successful",
            "schema": {
              "$ref": "#/definitions/responses.TokenResourceResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid credentials",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/logout": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Logout user (client should discard tokens)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["auth"],
        "summary": "User logout",
        "responses": {
          "200": {
            "description": "Logout successful",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "description": "Refresh an access token using a refresh token",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["auth"],
        "summary": "Refresh access token",
        "parameters": [
          {
            "description": "Refresh token request",
            "name": "token",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.RefreshTokenRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "schema": {
              "$ref": "#/definitions/responses.TokenResourceResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid refresh token",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "description": "Register a new user account with the provided information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["auth"],
        "summary": "Register a new user",
        "parameters": [
          {
            "description": "User registration request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.RegisterRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User registered successfully",
            "schema": {
              "$ref": "#/definitions/responses.AuthResourceResponse"
            }
          },
          "409": {
            "description": "Conflict - User already exists",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/auth/reset-password": {
      "post": {
        "description": "Reset password using email and OTP",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["auth"],
        "summary": "Reset password with OTP",
        "parameters": [
          {
            "description": "Password reset with OTP request",
            "name": "request",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.ResetPasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password reset successful",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid OTP",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/healthz": {
      "get": {
        "description": "Check if the API and all services are running and healthy",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["health"],
        "summary": "Health check endpoint",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/controllers.HealthResponse"
            }
          },
          "503": {
            "description": "Service Unavailable",
            "schema": {
              "$ref": "#/definitions/controllers.HealthResponse"
            }
          }
        }
      }
    },
    "/media": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a list of all media files with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["media"],
        "summary": "Get all media",
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of media items to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of media items to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search query to filter media by name or filename",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of media files",
            "schema": {
              "$ref": "#/definitions/responses.MediaCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Upload a new media file to the system",
        "consumes": ["multipart/form-data"],
        "produces": ["application/json"],
        "tags": ["media"],
        "summary": "Upload media",
        "parameters": [
          {
            "type": "file",
            "description": "Media file to upload",
            "name": "file",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "Custom name for the media file",
            "name": "name",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Description of the media file",
            "name": "description",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Media uploaded successfully",
            "schema": {
              "$ref": "#/definitions/responses.MediaResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid file or parameters",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "413": {
            "description": "Payload too large - File size exceeds limit",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "415": {
            "description": "Unsupported media type",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/media/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a specific media file by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["media"],
        "summary": "Get media by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Media ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Media file details",
            "schema": {
              "$ref": "#/definitions/responses.MediaResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid media ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Media does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update media file metadata (name, description, etc.)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["media"],
        "summary": "Update media",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Media ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Media update request",
            "name": "media",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Media updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.MediaResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Media does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a media file from the system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["media"],
        "summary": "Delete media",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Media ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Media deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid media ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Media does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a paginated list of menus with optional filtering",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Get all menus",
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of menus to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of menus to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "enum": ["true", "false"],
            "type": "string",
            "description": "Filter by active status (true/false)",
            "name": "active",
            "in": "query"
          },
          {
            "enum": ["true", "false"],
            "type": "string",
            "description": "Filter by visible status (true/false)",
            "name": "visible",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of menus",
            "schema": {
              "$ref": "#/definitions/responses.MenuCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new menu item with the provided information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Create a new menu",
        "parameters": [
          {
            "description": "Menu creation request",
            "name": "menu",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Menu created successfully",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "409": {
            "description": "Conflict - Menu with same slug already exists",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/hierarchy": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve the complete menu hierarchy with nested structure",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Get menu hierarchy",
        "responses": {
          "200": {
            "description": "Menu hierarchy",
            "schema": {
              "$ref": "#/definitions/responses.MenuCollectionResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/root": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all root-level menus (top-level menu items)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Get root menus",
        "responses": {
          "200": {
            "description": "List of root menus",
            "schema": {
              "$ref": "#/definitions/responses.MenuCollectionResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/search": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search menus by name or description",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Search menus",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of menus to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of menus to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of matching menus",
            "schema": {
              "$ref": "#/definitions/responses.MenuCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Search query is required",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/slug/{slug}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a menu by its URL-friendly slug",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Get menu by slug",
        "parameters": [
          {
            "type": "string",
            "description": "Menu slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu details",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Slug is required",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a specific menu by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Get menu by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu details",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid menu ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing menu's information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Update menu",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Menu update request",
            "name": "menu",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Menu updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a menu item (soft delete)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Delete menu",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid menu ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/{id}/activate": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Activate a deactivated menu item",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Activate menu",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu activated successfully",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid menu ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/{id}/deactivate": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Deactivate an active menu item",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Deactivate menu",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu deactivated successfully",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid menu ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/{id}/hide": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Make a visible menu item hidden",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Hide menu",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu hidden successfully",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid menu ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/menus/{id}/show": {
      "patch": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Make a hidden menu item visible",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Show menu",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Menu ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Menu shown successfully",
            "schema": {
              "$ref": "#/definitions/responses.MenuResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid menu ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - Menu does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "description": "Get a paginated list of all organizations",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get all organizations",
        "parameters": [
          {
            "type": "integer",
            "description": "Limit",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Offset",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.OrganizationCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new organization, optionally with a parent",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Create a new organization",
        "parameters": [
          {
            "description": "Organization to create",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateOrganizationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.OrganizationResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/root": {
      "get": {
        "description": "Get all root organizations (organizations without a parent)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get root organizations",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/search": {
      "get": {
        "description": "Search organizations by query string",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Search organizations",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "query",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Results per page",
            "name": "per_page",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.OrganizationCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/tree": {
      "get": {
        "description": "Get the entire organization tree structure",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get the full organization tree",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/validate-hierarchy": {
      "get": {
        "description": "Validate if a parent-child relationship is valid",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Validate organization hierarchy",
        "parameters": [
          {
            "type": "string",
            "description": "Parent Organization ID",
            "name": "parent_id",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "description": "Child Organization ID",
            "name": "child_id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "description": "Get a single organization by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get organization by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.OrganizationResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update an organization's details",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Update an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Organization update data",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.OrganizationResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an organization by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Delete an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/ancestors": {
      "get": {
        "description": "Get all ancestor organizations of an organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get ancestors of an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/children": {
      "get": {
        "description": "Get direct children of an organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get children of an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Add a new child organization to a parent",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Add a child organization",
        "parameters": [
          {
            "type": "string",
            "description": "Parent Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Child organization to create",
            "name": "organization",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateOrganizationRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.OrganizationResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/descendants": {
      "get": {
        "description": "Get all descendant organizations of an organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get descendants of an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/move": {
      "post": {
        "description": "Move an organization and all its descendants to a new parent",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Move an organization subtree",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Move request",
            "name": "move",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.MoveOrganizationRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/path": {
      "get": {
        "description": "Get the path from the root to the specified organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get path to an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/siblings": {
      "get": {
        "description": "Get all sibling organizations of an organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get siblings of an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/stats": {
      "get": {
        "description": "Get statistics for an organization (children and descendants count)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get organization statistics",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/status": {
      "put": {
        "description": "Set the status of an organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Set organization status",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Status request",
            "name": "status",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.SetOrganizationStatusRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/organizations/{id}/subtree": {
      "get": {
        "description": "Get the subtree rooted at the specified organization",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Get a subtree of an organization",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete an organization and all its descendants",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["organizations"],
        "summary": "Delete an organization subtree",
        "parameters": [
          {
            "type": "string",
            "description": "Organization ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/posts": {
      "get": {
        "description": "Retrieve a paginated list of posts with optional search and status filtering",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Get all posts",
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of posts to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of posts to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search query to filter posts by title or content",
            "name": "query",
            "in": "query"
          },
          {
            "enum": ["published", "draft", "archived"],
            "type": "string",
            "description": "Filter posts by status (published, draft, etc.)",
            "name": "status",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts",
            "schema": {
              "$ref": "#/definitions/responses.PostCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new blog post with the provided information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Create a new post",
        "parameters": [
          {
            "description": "Post creation request",
            "name": "post",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreatePostRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Post created successfully",
            "schema": {
              "$ref": "#/definitions/responses.PostResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Post with same slug already exists",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/posts/author/{authorID}": {
      "get": {
        "description": "Retrieve all posts written by a specific author",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Get posts by author",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Author ID",
            "name": "authorID",
            "in": "path",
            "required": true
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of posts to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of posts to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of posts by author",
            "schema": {
              "$ref": "#/definitions/responses.PostCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid author ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Author does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/posts/slug/{slug}": {
      "get": {
        "description": "Retrieve a post by its URL-friendly slug",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Get post by slug",
        "parameters": [
          {
            "type": "string",
            "description": "Post slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Post found",
            "schema": {
              "$ref": "#/definitions/responses.PostResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Slug is required",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Post does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/posts/{id}": {
      "get": {
        "description": "Retrieve a post by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Get post by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Post found",
            "schema": {
              "$ref": "#/definitions/responses.PostResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid post ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Post does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing post's information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Update post",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Post update request",
            "name": "post",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdatePostRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Post updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.PostResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Post does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a post (soft delete)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Delete post",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Post deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid post ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Post does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/posts/{id}/publish": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Publish a draft post to make it publicly visible",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Publish post",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Post published successfully",
            "schema": {
              "$ref": "#/definitions/responses.PostResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid post ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Post does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/posts/{id}/unpublish": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Unpublish a post to make it a draft (not publicly visible)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["posts"],
        "summary": "Unpublish post",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Post ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Post unpublished successfully",
            "schema": {
              "$ref": "#/definitions/responses.PostResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid post ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Post does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/profile": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve the authenticated user's profile information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Get user profile",
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/responses.UserResponse"
                    }
                  }
                }
              ]
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update the authenticated user's profile information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Update user profile",
        "parameters": [
          {
            "description": "User profile update request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Profile updated successfully",
            "schema": {
              "allOf": [
                {
                  "$ref": "#/definitions/responses.SuccessResponse"
                },
                {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/definitions/responses.UserResponse"
                    }
                  }
                }
              ]
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid or missing token",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/rbac/policies": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all RBAC policies from the system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Get all RBAC policies",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RBACPolicyCollectionResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Add a new policy rule to the RBAC system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Add a new RBAC policy",
        "parameters": [
          {
            "description": "Policy to add",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controllers.AddPolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RBACPolicyResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Remove a policy rule from the RBAC system",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Remove an RBAC policy",
        "parameters": [
          {
            "description": "Policy to remove",
            "name": "policy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/controllers.RemovePolicyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RBACPolicyResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/rbac/roles/{role}/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all users assigned to a specific role",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Get users for a role",
        "parameters": [
          {
            "type": "string",
            "description": "Role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RBACUserCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/rbac/users/{user}/roles": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all roles assigned to a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Get roles for a user",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RBACRoleCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/rbac/users/{user}/roles/{role}": {
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Assign a role to a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Add role to user",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Remove a role from a specific user",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["rbac"],
        "summary": "Remove role from user",
        "parameters": [
          {
            "type": "string",
            "description": "User ID",
            "name": "user",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Role name",
            "name": "role",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "description": "Get all roles with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Get all roles",
        "parameters": [
          {
            "type": "integer",
            "default": 1,
            "description": "Page number",
            "name": "page",
            "in": "query"
          },
          {
            "type": "integer",
            "default": 10,
            "description": "Number of items per page",
            "name": "limit",
            "in": "query"
          },
          {
            "enum": ["true", "false"],
            "type": "string",
            "description": "Filter by active status (true/false)",
            "name": "active",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new role with the provided information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Create a new role",
        "parameters": [
          {
            "description": "Role creation request",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.RoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/roles/search": {
      "get": {
        "description": "Search roles by name or description",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Search roles",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "q",
            "in": "query",
            "required": true
          },
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of roles to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of roles to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/roles/slug/{slug}": {
      "get": {
        "description": "Retrieve a role by its URL-friendly slug",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Get role by slug",
        "parameters": [
          {
            "type": "string",
            "description": "Role slug",
            "name": "slug",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/roles/{id}": {
      "get": {
        "description": "Retrieve a specific role by its unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Get role by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "description": "Update an existing role's information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Update role",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Role update request",
            "name": "role",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a role (soft delete)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Delete role",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/roles/{id}/activate": {
      "put": {
        "description": "Activate a deactivated role",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Activate role",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/roles/{id}/deactivate": {
      "put": {
        "description": "Deactivate an active role",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["roles"],
        "summary": "Deactivate role",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Role ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.RoleResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/tags": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a list of all tags with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tags"],
        "summary": "Get all tags",
        "parameters": [
          {
            "type": "integer",
            "description": "Number of tags to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of tags to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags",
            "schema": {
              "$ref": "#/definitions/responses.TagCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new tag",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tags"],
        "summary": "Create tag",
        "parameters": [
          {
            "description": "Tag object",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateTagRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Tag created successfully",
            "schema": {
              "$ref": "#/definitions/responses.TagResourceResponse"
            }
          },
          "409": {
            "description": "Conflict - Tag with same slug already exists",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "422": {
            "description": "Validation errors",
            "schema": {
              "$ref": "#/definitions/responses.ValidationErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/tags/search": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Search tags by query with pagination",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tags"],
        "summary": "Search tags",
        "parameters": [
          {
            "type": "string",
            "description": "Search query",
            "name": "query",
            "in": "query",
            "required": true
          },
          {
            "type": "integer",
            "description": "Number of tags to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of tags to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results",
            "schema": {
              "$ref": "#/definitions/responses.TagCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/tags/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a tag by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tags"],
        "summary": "Get tag by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Tag ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tag retrieved successfully",
            "schema": {
              "$ref": "#/definitions/responses.TagResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid tag ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Tag does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing tag by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tags"],
        "summary": "Update tag",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Tag ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Tag object",
            "name": "tag",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateTagRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Tag updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.TagResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid tag ID or input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Tag does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - Tag with same slug already exists",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a tag by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["tags"],
        "summary": "Delete tag",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Tag ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Tag deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid tag ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - Tag does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/users": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a paginated list of users with optional search and filtering",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Get all users",
        "parameters": [
          {
            "maximum": 100,
            "minimum": 1,
            "type": "integer",
            "default": 10,
            "description": "Number of users to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "default": 0,
            "description": "Number of users to skip (default: 0)",
            "name": "offset",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Search query to filter users by username, email, or phone",
            "name": "query",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "List of users",
            "schema": {
              "$ref": "#/definitions/responses.UserCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid parameters",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a new user account with the provided information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Create a new user",
        "parameters": [
          {
            "description": "User creation request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateUserRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "User created successfully",
            "schema": {
              "$ref": "#/definitions/responses.UserResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "409": {
            "description": "Conflict - User already exists",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve a user by their unique identifier",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Get user by ID",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User found",
            "schema": {
              "$ref": "#/definitions/responses.UserResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing user account with new information",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Update user",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "User update request",
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateUserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User updated successfully",
            "schema": {
              "$ref": "#/definitions/responses.UserResourceResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      },
      "delete": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Delete a user account (soft delete)",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Delete user",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{id}/password": {
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Change a user's password with old password verification",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["users"],
        "summary": "Change user password",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Password change request",
            "name": "password",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.ChangePasswordRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "schema": {
              "$ref": "#/definitions/responses.SuccessResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid input data",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "401": {
            "description": "Unauthorized - Invalid old password",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.ErrorResponse"
            }
          }
        }
      }
    },
    "/users/{user_id}/menus": {
      "get": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Retrieve all menus accessible to a specific user based on their roles",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["menus"],
        "summary": "Get user menus",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "User ID",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "List of user menus",
            "schema": {
              "$ref": "#/definitions/responses.MenuCollectionResponse"
            }
          },
          "400": {
            "description": "Bad request - Invalid user ID",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not found - User does not exist",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal server error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/v1/comments": {
      "get": {
        "description": "Get all comments with optional filtering",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "List comments",
        "parameters": [
          {
            "type": "string",
            "description": "Filter by post ID",
            "name": "post_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by user ID",
            "name": "user_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by parent comment ID",
            "name": "parent_id",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filter by status (approved, pending, rejected)",
            "name": "status",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of comments to return (default: 10, max: 100)",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "integer",
            "description": "Number of comments to skip (default: 0)",
            "name": "offset",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.CommentCollectionResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "post": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Create a new comment for a post",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "Create comment",
        "parameters": [
          {
            "description": "Comment info",
            "name": "comment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.CreateCommentRequest"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/responses.CommentResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/v1/comments/{id}": {
      "get": {
        "description": "Get a single comment by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "Get comment by ID",
        "parameters": [
          {
            "type": "string",
            "description": "Comment ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.CommentResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "put": {
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "description": "Update an existing comment",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "Update comment",
        "parameters": [
          {
            "type": "string",
            "description": "Comment ID",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "Comment info",
            "name": "comment",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/requests.UpdateCommentRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.CommentResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a comment by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "Delete comment",
        "parameters": [
          {
            "type": "string",
            "description": "Comment ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/v1/comments/{id}/approve": {
      "put": {
        "description": "Approve a comment by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "Approve comment",
        "parameters": [
          {
            "type": "string",
            "description": "Comment ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.CommentResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    },
    "/v1/comments/{id}/reject": {
      "put": {
        "description": "Reject a comment by its ID",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "tags": ["comments"],
        "summary": "Reject comment",
        "parameters": [
          {
            "type": "string",
            "description": "Comment ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/responses.CommentResourceResponse"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          },
          "500": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/responses.CommonResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "controllers.AddPolicyRequest": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "controllers.HealthCheck": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        }
      }
    },
    "controllers.HealthResponse": {
      "type": "object",
      "properties": {
        "environment": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/controllers.HealthCheck"
          }
        },
        "status": {
          "type": "string"
        },
        "timestamp": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "controllers.RemovePolicyRequest": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string"
        },
        "object": {
          "type": "string"
        },
        "subject": {
          "type": "string"
        }
      }
    },
    "entities.Taxonomy": {
      "type": "object",
      "properties": {
        "children": {
          "description": "Collection of child taxonomies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/entities.Taxonomy"
          }
        },
        "code": {
          "description": "Optional taxonomy code/identifier",
          "type": "string"
        },
        "created_at": {
          "description": "Timestamp when taxonomy was created",
          "type": "string"
        },
        "created_by": {
          "description": "ID of user who created this taxonomy",
          "type": "string"
        },
        "deleted_at": {
          "description": "Timestamp when taxonomy was soft deleted",
          "type": "string"
        },
        "deleted_by": {
          "description": "ID of user who deleted this taxonomy (soft delete)",
          "type": "string"
        },
        "description": {
          "description": "Optional description of the taxonomy",
          "type": "string"
        },
        "id": {
          "description": "Unique identifier for the taxonomy",
          "type": "string"
        },
        "name": {
          "description": "Display name of the taxonomy",
          "type": "string"
        },
        "parent": {
          "description": "Relationships",
          "allOf": [
            {
              "$ref": "#/definitions/entities.Taxonomy"
            }
          ]
        },
        "parent_id": {
          "description": "ID of parent taxonomy (nil for root items)",
          "type": "string"
        },
        "record_depth": {
          "description": "Depth level in the hierarchy",
          "type": "integer"
        },
        "record_left": {
          "description": "Left boundary for nested set model",
          "type": "integer"
        },
        "record_right": {
          "description": "Right boundary for nested set model",
          "type": "integer"
        },
        "slug": {
          "description": "URL-friendly identifier for the taxonomy",
          "type": "string"
        },
        "updated_at": {
          "description": "Timestamp when taxonomy was last updated",
          "type": "string"
        },
        "updated_by": {
          "description": "ID of user who last updated this taxonomy",
          "type": "string"
        }
      }
    },
    "pagination.PaginationResponse": {
      "type": "object",
      "properties": {
        "current_page": {
          "type": "integer"
        },
        "from": {
          "type": "integer"
        },
        "has_next_page": {
          "type": "boolean"
        },
        "has_prev_page": {
          "type": "boolean"
        },
        "next_page": {
          "type": "integer"
        },
        "per_page": {
          "type": "integer"
        },
        "previous_page": {
          "type": "integer"
        },
        "to": {
          "type": "integer"
        },
        "total_items": {
          "type": "integer"
        },
        "total_pages": {
          "type": "integer"
        }
      }
    },
    "pagination.TaxonomyDTO": {
      "type": "object",
      "properties": {
        "children": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pagination.TaxonomyDTO"
          }
        },
        "code": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "deleted_at": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parent": {
          "description": "Relationships",
          "allOf": [
            {
              "$ref": "#/definitions/pagination.TaxonomyDTO"
            }
          ]
        },
        "parent_id": {
          "type": "string"
        },
        "record_depth": {
          "type": "integer"
        },
        "record_left": {
          "type": "integer"
        },
        "record_right": {
          "type": "integer"
        },
        "slug": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "pagination.TaxonomySearchResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/pagination.TaxonomyDTO"
          }
        },
        "pagination": {
          "$ref": "#/definitions/pagination.PaginationResponse"
        }
      }
    },
    "requests.ChangePasswordRequest": {
      "type": "object",
      "properties": {
        "new_password": {
          "description": "NewPassword is the new password to set (required, minimum 8 characters)",
          "type": "string"
        },
        "old_password": {
          "description": "OldPassword is the current password for verification (required)",
          "type": "string"
        }
      }
    },
    "requests.CreateAddressRequest": {
      "type": "object",
      "required": [
        "address_line1",
        "address_type",
        "addressable_id",
        "addressable_type",
        "city",
        "country",
        "postal_code",
        "state"
      ],
      "properties": {
        "address_line1": {
          "description": "AddressLine1 is the primary street address (required, 1-255 characters)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "address_line2": {
          "description": "AddressLine2 is an optional secondary address line (max 255 characters)",
          "type": "string",
          "maxLength": 255
        },
        "address_type": {
          "description": "AddressType specifies the purpose of this address (home, work, billing, shipping, other)",
          "type": "string",
          "enum": ["home", "work", "billing", "shipping", "other"]
        },
        "addressable_id": {
          "description": "AddressableID is the UUID of the entity (user or organization) that owns this address",
          "type": "string"
        },
        "addressable_type": {
          "description": "AddressableType specifies whether this address belongs to a user or organization",
          "type": "string",
          "enum": ["user", "organization"]
        },
        "city": {
          "description": "City is the city or municipality name (required, 1-255 characters)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "country": {
          "description": "Country is the country name (required, 1-255 characters)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "is_primary": {
          "description": "IsPrimary indicates whether this is the primary address for the addressable entity",
          "type": "boolean"
        },
        "latitude": {
          "description": "Latitude is the optional geographic latitude coordinate (-90 to 90 degrees)",
          "type": "number",
          "maximum": 90,
          "minimum": -90
        },
        "longitude": {
          "description": "Longitude is the optional geographic longitude coordinate (-180 to 180 degrees)",
          "type": "number",
          "maximum": 180,
          "minimum": -180
        },
        "postal_code": {
          "description": "PostalCode is the postal or ZIP code (required, 1-20 characters)",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "state": {
          "description": "State is the state, province, or region (required, 1-255 characters)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        }
      }
    },
    "requests.CreateCommentRequest": {
      "type": "object",
      "required": ["content", "post_id"],
      "properties": {
        "content": {
          "description": "Content is the text content of the comment (required, 1-1000 characters)",
          "type": "string",
          "maxLength": 1000,
          "minLength": 1
        },
        "parent_id": {
          "description": "ParentID is the UUID of the parent comment for replies (optional, nil for top-level comments)",
          "type": "string"
        },
        "post_id": {
          "description": "PostID is the UUID of the post this comment belongs to (required)",
          "type": "string"
        }
      }
    },
    "requests.CreateOrganizationRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "address": {
          "description": "Address is the organization's physical address (optional, max 500 characters)",
          "type": "string",
          "maxLength": 500
        },
        "code": {
          "description": "Code is a unique identifier for the organization (optional, max 50 characters, alphanumeric + hyphens)",
          "type": "string",
          "maxLength": 50
        },
        "description": {
          "description": "Description provides additional details about the organization (optional, max 1000 characters)",
          "type": "string",
          "maxLength": 1000
        },
        "email": {
          "description": "Email is the organization's contact email address (optional, must be valid email format if provided)",
          "type": "string",
          "maxLength": 255
        },
        "logo_url": {
          "description": "LogoURL is the URL to the organization's logo image (optional, must be valid URL format if provided)",
          "type": "string",
          "maxLength": 500
        },
        "name": {
          "description": "Name is the organization's display name (required, 1-255 characters)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "parent_id": {
          "description": "ParentID is the UUID of the parent organization for hierarchical structures (optional, must be valid UUID if provided)",
          "type": "string"
        },
        "phone": {
          "description": "Phone is the organization's contact phone number (optional, max 50 characters)",
          "type": "string",
          "maxLength": 50
        },
        "website": {
          "description": "Website is the organization's website URL (optional, must be valid URL format if provided)",
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "requests.CreatePostRequest": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content is the main body text of the post (required)",
          "type": "string"
        },
        "description": {
          "description": "Description is a brief overview of the post content (optional)",
          "type": "string"
        },
        "is_sticky": {
          "description": "IsSticky determines if the post should be prominently displayed (optional, defaults to false)",
          "type": "boolean"
        },
        "language": {
          "description": "Language specifies the post's language code (optional, e.g., \"en\", \"id\")",
          "type": "string"
        },
        "layout": {
          "description": "Layout defines the visual presentation style of the post (optional)",
          "type": "string"
        },
        "published_at": {
          "description": "PublishedAt sets the publication timestamp (optional, nil for immediate publication)",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly identifier for the post (optional, auto-generated from title if not provided)",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle provides additional context or summary below the title (optional)",
          "type": "string"
        },
        "title": {
          "description": "Title is the main headline of the post (required)",
          "type": "string"
        }
      }
    },
    "requests.CreateTagRequest": {
      "type": "object",
      "properties": {
        "color": {
          "description": "Color is the hex color code for visual representation (optional, must be valid hex format if provided)",
          "type": "string"
        },
        "description": {
          "description": "Description provides additional details about the tag (optional)",
          "type": "string"
        },
        "name": {
          "description": "Name is the display name for the tag (required)",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly identifier for the tag (optional, auto-generated from name if not provided, lowercase, alphanumeric + hyphens only)",
          "type": "string"
        }
      }
    },
    "requests.CreateTaxonomyRequest": {
      "type": "object",
      "required": ["name"],
      "properties": {
        "code": {
          "description": "Code is a unique identifier for the taxonomy (optional, max 50 characters)",
          "type": "string",
          "maxLength": 50
        },
        "description": {
          "description": "Description provides additional details about the taxonomy (optional, max 1000 characters)",
          "type": "string",
          "maxLength": 1000
        },
        "name": {
          "description": "Name is the display name for the taxonomy (required, 1-255 characters)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "parent_id": {
          "description": "ParentID is the UUID of the parent taxonomy for hierarchical structures (optional, must be valid UUID if provided)",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly identifier for the taxonomy (optional, 1-255 characters if provided, auto-generated from name if empty)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        }
      }
    },
    "requests.CreateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "Email is the user's email address for authentication and communication (required)",
          "type": "string"
        },
        "password": {
          "description": "Password is the user's secure password for account access (required, minimum 8 characters)",
          "type": "string"
        },
        "phone": {
          "description": "Phone is the user's phone number with country code (required)",
          "type": "string"
        },
        "username": {
          "description": "Username is the unique identifier for the user account (required)",
          "type": "string"
        }
      }
    },
    "requests.ForgetPasswordRequest": {
      "type": "object",
      "required": ["identifier"],
      "properties": {
        "identifier": {
          "description": "Identifier can be username, email, or phone number for password reset (required)",
          "type": "string"
        }
      }
    },
    "requests.LoginRequest": {
      "type": "object",
      "properties": {
        "identity": {
          "description": "Identity is the username or email for authentication (required)",
          "type": "string"
        },
        "password": {
          "description": "Password is the user's password for verification (required)",
          "type": "string"
        }
      }
    },
    "requests.MoveOrganizationRequest": {
      "type": "object",
      "required": ["new_parent_id"],
      "properties": {
        "new_parent_id": {
          "description": "NewParentID is the UUID of the new parent organization (required, must be valid UUID)",
          "type": "string"
        }
      }
    },
    "requests.RefreshTokenRequest": {
      "type": "object",
      "required": ["refresh_token"],
      "properties": {
        "refresh_token": {
          "description": "RefreshToken is the refresh token used to obtain a new access token (required)",
          "type": "string"
        }
      }
    },
    "requests.RegisterRequest": {
      "type": "object",
      "required": ["confirm_password", "email", "password", "phone", "username"],
      "properties": {
        "confirm_password": {
          "description": "ConfirmPassword is the password confirmation to prevent typos (required, must match Password)",
          "type": "string"
        },
        "email": {
          "description": "Email is the user's email address for authentication and communication (required, must be valid email format)",
          "type": "string"
        },
        "password": {
          "description": "Password is the user's secure password for account access (required, 8-32 characters)",
          "type": "string",
          "maxLength": 32,
          "minLength": 8
        },
        "phone": {
          "description": "Phone is the user's phone number with country code (required, e.g., +1234567890)",
          "type": "string"
        },
        "username": {
          "description": "Username is the unique identifier for the user account (required, 3-32 characters)",
          "type": "string",
          "maxLength": 32,
          "minLength": 3
        }
      }
    },
    "requests.ResetPasswordRequest": {
      "type": "object",
      "required": ["confirm_password", "email", "otp", "password"],
      "properties": {
        "confirm_password": {
          "description": "ConfirmPassword is the password confirmation to prevent typos (required, must match Password)",
          "type": "string"
        },
        "email": {
          "description": "Email is the user's email address for verification (required, must be valid email format)",
          "type": "string"
        },
        "otp": {
          "description": "OTP is the one-time password for verification (required)",
          "type": "string"
        },
        "password": {
          "description": "Password is the new password to set (required, 8-32 characters)",
          "type": "string",
          "maxLength": 32,
          "minLength": 8
        }
      }
    },
    "requests.SetAddressTypeRequest": {
      "type": "object",
      "required": ["address_type"],
      "properties": {
        "address_type": {
          "description": "AddressType specifies the new purpose of the address (must be valid enum value)",
          "type": "string",
          "enum": ["home", "work", "billing", "shipping", "other"]
        }
      }
    },
    "requests.SetOrganizationStatusRequest": {
      "type": "object",
      "required": ["status"],
      "properties": {
        "status": {
          "description": "Status is the new status for the organization (required, must be valid enum value)",
          "type": "string",
          "enum": ["active", "inactive", "suspended"]
        }
      }
    },
    "requests.SetPrimaryAddressRequest": {
      "type": "object",
      "required": ["addressable_id", "addressable_type"],
      "properties": {
        "addressable_id": {
          "description": "AddressableID is the UUID of the entity (user or organization) that owns the address",
          "type": "string"
        },
        "addressable_type": {
          "description": "AddressableType specifies whether this address belongs to a user or organization",
          "type": "string",
          "enum": ["user", "organization"]
        }
      }
    },
    "requests.UpdateAddressRequest": {
      "type": "object",
      "properties": {
        "address_line1": {
          "description": "AddressLine1 is the primary street address (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "address_line2": {
          "description": "AddressLine2 is an optional secondary address line (max 255 characters if provided)",
          "type": "string",
          "maxLength": 255
        },
        "address_type": {
          "description": "AddressType specifies the purpose of this address (optional, must be valid enum if provided)",
          "type": "string",
          "enum": ["home", "work", "billing", "shipping", "other"]
        },
        "city": {
          "description": "City is the city or municipality name (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "country": {
          "description": "Country is the country name (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "is_primary": {
          "description": "IsPrimary indicates whether this is the primary address (optional boolean)",
          "type": "boolean"
        },
        "latitude": {
          "description": "Latitude is the optional geographic latitude coordinate (-90 to 90 degrees if provided)",
          "type": "number",
          "maximum": 90,
          "minimum": -90
        },
        "longitude": {
          "description": "Longitude is the optional geographic longitude coordinate (-180 to 180 degrees if provided)",
          "type": "number",
          "maximum": 180,
          "minimum": -180
        },
        "postal_code": {
          "description": "PostalCode is the postal or ZIP code (optional, 1-20 characters if provided)",
          "type": "string",
          "maxLength": 20,
          "minLength": 1
        },
        "state": {
          "description": "State is the state, province, or region (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        }
      }
    },
    "requests.UpdateCommentRequest": {
      "type": "object",
      "required": ["content"],
      "properties": {
        "content": {
          "description": "Content is the updated text content of the comment (required, 1-1000 characters)",
          "type": "string",
          "maxLength": 1000,
          "minLength": 1
        }
      }
    },
    "requests.UpdateOrganizationRequest": {
      "type": "object",
      "properties": {
        "address": {
          "description": "Address is the organization's physical address (optional, max 500 characters if provided)",
          "type": "string",
          "maxLength": 500
        },
        "code": {
          "description": "Code is a unique identifier for the organization (optional, max 50 characters, alphanumeric + hyphens if provided)",
          "type": "string",
          "maxLength": 50
        },
        "description": {
          "description": "Description provides additional details about the organization (optional, max 1000 characters if provided)",
          "type": "string",
          "maxLength": 1000
        },
        "email": {
          "description": "Email is the organization's contact email address (optional, must be valid email format if provided)",
          "type": "string",
          "maxLength": 255
        },
        "logo_url": {
          "description": "LogoURL is the URL to the organization's logo image (optional, must be valid URL format if provided)",
          "type": "string",
          "maxLength": 500
        },
        "name": {
          "description": "Name is the organization's display name (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "phone": {
          "description": "Phone is the organization's contact phone number (optional, max 50 characters if provided)",
          "type": "string",
          "maxLength": 50
        },
        "website": {
          "description": "Website is the organization's website URL (optional, must be valid URL format if provided)",
          "type": "string",
          "maxLength": 255
        }
      }
    },
    "requests.UpdatePostRequest": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content is the main body text of the post (optional)",
          "type": "string"
        },
        "description": {
          "description": "Description is a brief overview of the post content (optional)",
          "type": "string"
        },
        "is_sticky": {
          "description": "IsSticky determines if the post should be prominently displayed (optional)",
          "type": "boolean"
        },
        "language": {
          "description": "Language specifies the post's language code (optional, e.g., \"en\", \"id\")",
          "type": "string"
        },
        "layout": {
          "description": "Layout defines the visual presentation style of the post (optional)",
          "type": "string"
        },
        "published_at": {
          "description": "PublishedAt sets the publication timestamp (optional)",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly identifier for the post (optional, auto-generated from title if not provided)",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle provides additional context or summary below the title (optional)",
          "type": "string"
        },
        "title": {
          "description": "Title is the main headline of the post (optional)",
          "type": "string"
        }
      }
    },
    "requests.UpdateTagRequest": {
      "type": "object",
      "properties": {
        "color": {
          "description": "Color is the hex color code for visual representation (optional, must be valid hex format if provided)",
          "type": "string"
        },
        "description": {
          "description": "Description provides additional details about the tag (optional)",
          "type": "string"
        },
        "name": {
          "description": "Name is the display name for the tag (optional)",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly identifier for the tag (optional, lowercase, alphanumeric + hyphens only)",
          "type": "string"
        }
      }
    },
    "requests.UpdateTaxonomyRequest": {
      "type": "object",
      "properties": {
        "code": {
          "description": "Code is a unique identifier for the taxonomy (optional, max 50 characters if provided)",
          "type": "string",
          "maxLength": 50
        },
        "description": {
          "description": "Description provides additional details about the taxonomy (optional, max 1000 characters if provided)",
          "type": "string",
          "maxLength": 1000
        },
        "name": {
          "description": "Name is the display name for the taxonomy (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        },
        "parent_id": {
          "description": "ParentID is the UUID of the parent taxonomy for hierarchical structures (optional, must be valid UUID if provided)",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly identifier for the taxonomy (optional, 1-255 characters if provided)",
          "type": "string",
          "maxLength": 255,
          "minLength": 1
        }
      }
    },
    "requests.UpdateUserRequest": {
      "type": "object",
      "properties": {
        "email": {
          "description": "Email is the user's email address for authentication and communication (optional)",
          "type": "string"
        },
        "phone": {
          "description": "Phone is the user's phone number with country code (optional)",
          "type": "string"
        },
        "username": {
          "description": "Username is the unique identifier for the user account (optional)",
          "type": "string"
        }
      }
    },
    "responses.AddressCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of address resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.AddressResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.AddressCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the address collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.AddressCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.AddressResource": {
      "type": "object",
      "properties": {
        "address_line1": {
          "description": "AddressLine1 is the primary address line (e.g., street number and name)",
          "type": "string"
        },
        "address_line2": {
          "description": "AddressLine2 is an optional secondary address line (e.g., apartment number)",
          "type": "string"
        },
        "address_type": {
          "description": "AddressType specifies the type of address (e.g., \"home\", \"work\", \"billing\")",
          "type": "string"
        },
        "addressable_id": {
          "description": "AddressableID is the ID of the entity that owns this address (e.g., user, organization)",
          "type": "string"
        },
        "addressable_type": {
          "description": "AddressableType is the type of entity that owns this address (e.g., \"user\", \"organization\")",
          "type": "string"
        },
        "city": {
          "description": "City is the city or municipality name",
          "type": "string"
        },
        "country": {
          "description": "Country is the country name",
          "type": "string"
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the address was created",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the address was soft-deleted",
          "type": "string"
        },
        "has_coordinates": {
          "description": "HasCoordinates indicates whether this address has valid latitude/longitude data",
          "type": "boolean"
        },
        "id": {
          "description": "ID is the unique identifier for the address",
          "type": "string"
        },
        "is_primary": {
          "description": "IsPrimary indicates whether this is the primary address for the addressable entity",
          "type": "boolean"
        },
        "latitude": {
          "description": "Latitude is the optional latitude coordinate for geolocation",
          "type": "number"
        },
        "longitude": {
          "description": "Longitude is the optional longitude coordinate for geolocation",
          "type": "number"
        },
        "postal_code": {
          "description": "PostalCode is the postal or ZIP code",
          "type": "string"
        },
        "state": {
          "description": "State is the state or province name",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the address was last updated",
          "type": "string"
        }
      }
    },
    "responses.AddressResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the address resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.AddressResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.AuthResource": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "AccessToken is the JWT token used for API authentication",
          "type": "string"
        },
        "expires_in": {
          "description": "ExpiresIn indicates the number of seconds until the access token expires",
          "type": "integer"
        },
        "refresh_token": {
          "description": "RefreshToken is the token used to obtain a new access token when it expires",
          "type": "string"
        },
        "token_type": {
          "description": "TokenType specifies the type of authentication token (typically \"Bearer\")",
          "type": "string"
        },
        "user": {
          "description": "User contains the authenticated user's basic information",
          "allOf": [
            {
              "$ref": "#/definitions/responses.AuthUserResource"
            }
          ]
        }
      }
    },
    "responses.AuthResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the authentication resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.AuthResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.AuthUserResource": {
      "type": "object",
      "properties": {
        "avatar": {
          "description": "Avatar is an optional URL to the user's profile picture",
          "type": "string"
        },
        "email": {
          "description": "Email is the user's email address",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the user",
          "type": "string"
        },
        "menus": {
          "description": "Menus contains the user's menus in a simplified format",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.UserMenuResponse"
          }
        },
        "phone": {
          "description": "Phone is the user's phone number",
          "type": "string"
        },
        "roles": {
          "description": "Roles contains the user's roles in a simplified format",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.UserRoleResponse"
          }
        },
        "username": {
          "description": "Username is the user's chosen username for login",
          "type": "string"
        }
      }
    },
    "responses.CollectionLinks": {
      "type": "object",
      "properties": {
        "first": {
          "type": "string"
        },
        "last": {
          "type": "string"
        },
        "next": {
          "type": "string"
        },
        "prev": {
          "type": "string"
        }
      }
    },
    "responses.CollectionMeta": {
      "type": "object",
      "properties": {
        "current_page": {
          "type": "integer"
        },
        "from": {
          "type": "integer"
        },
        "has_next_page": {
          "type": "boolean"
        },
        "has_prev_page": {
          "type": "boolean"
        },
        "next_page": {
          "type": "integer"
        },
        "per_page": {
          "type": "integer"
        },
        "previous_page": {
          "type": "integer"
        },
        "to": {
          "type": "integer"
        },
        "total_items": {
          "type": "integer"
        },
        "total_pages": {
          "type": "integer"
        }
      }
    },
    "responses.CommentCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of comment resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.CommentResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.CommentCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the comment collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CommentCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.CommentResource": {
      "type": "object",
      "properties": {
        "author": {
          "description": "Author contains information about the user who wrote the comment",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserResource"
            }
          ]
        },
        "content": {
          "description": "Content contains the comment's text content in both raw and HTML formats",
          "allOf": [
            {
              "$ref": "#/definitions/responses.ContentResource"
            }
          ]
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the comment was created",
          "type": "string"
        },
        "created_by": {
          "description": "CreatedBy is the ID of the user who created the comment",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the comment was soft-deleted",
          "type": "string"
        },
        "deleted_by": {
          "description": "DeletedBy is the optional ID of the user who deleted the comment",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the comment",
          "type": "string"
        },
        "is_approved": {
          "description": "IsApproved indicates whether the comment has been approved for display",
          "type": "boolean"
        },
        "is_deleted": {
          "description": "IsDeleted indicates whether the comment has been soft-deleted",
          "type": "boolean"
        },
        "is_pending": {
          "description": "IsPending indicates whether the comment is awaiting approval",
          "type": "boolean"
        },
        "is_rejected": {
          "description": "IsRejected indicates whether the comment has been rejected",
          "type": "boolean"
        },
        "is_reply": {
          "description": "Computed fields for easy status checking\nIsReply indicates whether this comment is a reply to another comment",
          "type": "boolean"
        },
        "model_id": {
          "description": "ModelID is the ID of the entity this comment belongs to (e.g., post, article)",
          "type": "string"
        },
        "model_type": {
          "description": "ModelType is the type of entity this comment belongs to (e.g., \"Post\", \"Article\")",
          "type": "string"
        },
        "parent_id": {
          "description": "ParentID is the optional ID of the parent comment for nested replies",
          "type": "string"
        },
        "record_depth": {
          "description": "RecordDepth indicates the nesting level of the comment in the tree",
          "type": "integer"
        },
        "record_left": {
          "description": "RecordLeft is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "record_ordering": {
          "description": "RecordOrdering determines the display order of comments",
          "type": "integer"
        },
        "record_right": {
          "description": "RecordRight is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "status": {
          "description": "Status indicates the current status of the comment (e.g., \"approved\", \"pending\", \"rejected\")",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the comment was last updated",
          "type": "string"
        },
        "updated_by": {
          "description": "UpdatedBy is the ID of the user who last updated the comment",
          "type": "string"
        }
      }
    },
    "responses.CommentResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the comment resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CommentResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.CommonResponse": {
      "type": "object",
      "properties": {
        "data": {},
        "errors": {},
        "request_id": {
          "type": "string"
        },
        "response_code": {
          "type": "integer"
        },
        "response_message": {
          "type": "string"
        }
      }
    },
    "responses.ContentResource": {
      "type": "object",
      "properties": {
        "content_html": {
          "description": "ContentHTML is the HTML-formatted version of the content for safe display",
          "type": "string"
        },
        "content_raw": {
          "description": "ContentRaw is the original, unprocessed text content",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the content",
          "type": "string"
        }
      }
    },
    "responses.ErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {},
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "responses.MediaCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of media item resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.MediaResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.MediaCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the media collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.MediaCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.MediaResource": {
      "type": "object",
      "properties": {
        "created_at": {
          "description": "CreatedAt is the timestamp when the media item was created",
          "type": "string"
        },
        "created_by": {
          "description": "CreatedBy is the ID of the user who created the media item",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the media item was soft-deleted",
          "type": "string"
        },
        "deleted_by": {
          "description": "DeletedBy is the optional ID of the user who deleted the media item",
          "type": "string"
        },
        "disk": {
          "description": "Disk specifies the storage disk where the file is located",
          "type": "string"
        },
        "file_extension": {
          "description": "FileExtension is the file extension extracted from the filename",
          "type": "string"
        },
        "file_name": {
          "description": "FileName is the original filename of the uploaded file",
          "type": "string"
        },
        "file_size_in_kb": {
          "description": "FileSizeInKB is the file size formatted in kilobytes",
          "type": "number"
        },
        "file_size_in_mb": {
          "description": "FileSizeInMB is the file size formatted in megabytes",
          "type": "number"
        },
        "hash": {
          "description": "Hash is the unique hash value for file integrity verification",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the media item",
          "type": "string"
        },
        "is_audio": {
          "description": "IsAudio indicates whether the file is an audio file (based on MIME type)",
          "type": "boolean"
        },
        "is_deleted": {
          "description": "Computed fields\nIsDeleted indicates whether the media item has been soft-deleted",
          "type": "boolean"
        },
        "is_image": {
          "description": "IsImage indicates whether the file is an image (based on MIME type)",
          "type": "boolean"
        },
        "is_video": {
          "description": "IsVideo indicates whether the file is a video (based on MIME type)",
          "type": "boolean"
        },
        "mime_type": {
          "description": "MimeType indicates the MIME type of the file (e.g., \"image/jpeg\", \"video/mp4\")",
          "type": "string"
        },
        "name": {
          "description": "Name is the display name of the media item",
          "type": "string"
        },
        "record_depth": {
          "description": "RecordDepth is the depth level in the hierarchy tree",
          "type": "integer"
        },
        "record_left": {
          "description": "RecordLeft is the left boundary value for nested set model hierarchy",
          "type": "integer"
        },
        "record_ordering": {
          "description": "RecordOrdering is the ordering value within the hierarchy level",
          "type": "integer"
        },
        "record_right": {
          "description": "RecordRight is the right boundary value for nested set model hierarchy",
          "type": "integer"
        },
        "size": {
          "description": "Size is the file size in bytes",
          "type": "integer"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the media item was last updated",
          "type": "string"
        },
        "updated_by": {
          "description": "UpdatedBy is the ID of the user who last updated the media item",
          "type": "string"
        },
        "url": {
          "description": "URL is the public URL where the media file can be accessed",
          "type": "string"
        }
      }
    },
    "responses.MediaResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the media item resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.MediaResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.MenuCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of menu item resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.MenuItemResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.MenuCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the menu collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.MenuCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.MenuItemResource": {
      "type": "object",
      "properties": {
        "children": {
          "description": "Children contains the nested child menu items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.MenuItemResource"
          }
        },
        "depth": {
          "description": "Depth indicates the nesting level of the menu item in the tree",
          "type": "integer"
        },
        "description": {
          "description": "Description is an optional description of the menu item",
          "type": "string"
        },
        "icon": {
          "description": "Icon is the optional icon identifier for the menu item",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the menu item",
          "type": "string"
        },
        "is_active": {
          "description": "IsActive indicates whether the menu item is currently active/enabled",
          "type": "boolean"
        },
        "is_leaf": {
          "description": "IsLeaf indicates whether this menu item has no children",
          "type": "boolean"
        },
        "is_root": {
          "description": "IsRoot indicates whether this menu item is at the root level (no parent)",
          "type": "boolean"
        },
        "is_visible": {
          "description": "IsVisible indicates whether the menu item should be displayed to users",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the display name of the menu item",
          "type": "string"
        },
        "parent": {
          "description": "Nested resources for complete menu structure\nParent contains the parent menu item if this is a child item",
          "allOf": [
            {
              "$ref": "#/definitions/responses.MenuItemResource"
            }
          ]
        },
        "parent_id": {
          "description": "ParentID is the optional ID of the parent menu item for hierarchical menus",
          "type": "string"
        },
        "record_depth": {
          "description": "RecordDepth indicates the nesting level of the menu item in the tree",
          "type": "integer"
        },
        "record_left": {
          "description": "RecordLeft is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "record_ordering": {
          "description": "RecordOrdering determines the display order of menu items",
          "type": "integer"
        },
        "record_right": {
          "description": "RecordRight is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "roles": {
          "description": "Roles contains the roles that have access to this menu item",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RoleResource"
          }
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the menu item name",
          "type": "string"
        },
        "target": {
          "description": "Target specifies the target attribute for the menu link (e.g., \"_blank\", \"_self\")",
          "type": "string"
        },
        "url": {
          "description": "URL is the optional destination URL for the menu item",
          "type": "string"
        },
        "width": {
          "description": "Width indicates the number of descendants this menu item has",
          "type": "integer"
        }
      }
    },
    "responses.MenuResource": {
      "type": "object",
      "properties": {
        "created_at": {
          "description": "CreatedAt is the timestamp when the menu item was created",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional description of the menu item",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the menu item",
          "type": "string"
        },
        "name": {
          "description": "Name is the display name of the menu item",
          "type": "string"
        },
        "order": {
          "description": "Order determines the display order of the menu item",
          "type": "integer"
        },
        "parent_id": {
          "description": "ParentID is the optional ID of the parent menu item for hierarchical menus",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the menu item name",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the menu item was last updated",
          "type": "string"
        }
      }
    },
    "responses.MenuResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the menu item resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.MenuItemResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.OrganizationCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of organization resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.OrganizationResource"
          }
        },
        "links": {
          "description": "Links contains optional navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains optional collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.OrganizationCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the organization collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.OrganizationCollection"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.OrganizationResource": {
      "type": "object",
      "properties": {
        "children": {
          "description": "Children contains the nested child organizations",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.OrganizationResource"
          }
        },
        "code": {
          "description": "Code is an optional code identifier for the organization",
          "type": "string"
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the organization was created",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the organization was soft-deleted",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional description of the organization",
          "type": "string"
        },
        "has_children": {
          "description": "HasChildren indicates whether this organization has child organizations",
          "type": "boolean"
        },
        "has_parent": {
          "description": "HasParent indicates whether this organization has a parent organization",
          "type": "boolean"
        },
        "id": {
          "description": "ID is the unique identifier for the organization",
          "type": "string"
        },
        "is_root": {
          "description": "IsRoot indicates whether this organization is at the root level (no parent)",
          "type": "boolean"
        },
        "level": {
          "description": "Level indicates the hierarchical level of the organization (0 for root)",
          "type": "integer"
        },
        "name": {
          "description": "Name is the display name of the organization",
          "type": "string"
        },
        "parent": {
          "description": "Parent contains the parent organization if this is a child organization",
          "allOf": [
            {
              "$ref": "#/definitions/responses.OrganizationResource"
            }
          ]
        },
        "parent_id": {
          "description": "ParentID is the optional ID of the parent organization for hierarchical structures",
          "type": "string"
        },
        "record_depth": {
          "description": "RecordDepth indicates the nesting level of the organization in the tree",
          "type": "integer"
        },
        "record_left": {
          "description": "RecordLeft is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "record_ordering": {
          "description": "RecordOrdering determines the display order of organizations",
          "type": "integer"
        },
        "record_right": {
          "description": "RecordRight is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "status": {
          "description": "Status indicates the current status of the organization",
          "type": "string"
        },
        "type": {
          "description": "Type is an optional type classification for the organization",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the organization was last updated",
          "type": "string"
        }
      }
    },
    "responses.OrganizationResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the organization resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.OrganizationResource"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.PostCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of post resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.PostResource"
          }
        },
        "links": {
          "description": "Links contains optional navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains optional collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.PostCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the post collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.PostCollection"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.PostResource": {
      "type": "object",
      "properties": {
        "content": {
          "description": "Content contains the main body content of the post",
          "type": "string"
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the post was created",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the post was soft-deleted",
          "type": "string"
        },
        "description": {
          "description": "Description is a brief description or excerpt of the post content",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the post",
          "type": "string"
        },
        "is_published": {
          "description": "IsPublished indicates whether the post is currently published",
          "type": "boolean"
        },
        "is_sticky": {
          "description": "IsSticky indicates whether the post should be displayed prominently",
          "type": "boolean"
        },
        "language": {
          "description": "Language specifies the language of the post content",
          "type": "string"
        },
        "layout": {
          "description": "Layout specifies the display layout for the post",
          "type": "string"
        },
        "published_at": {
          "description": "PublishedAt is the optional timestamp when the post was published",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the post title",
          "type": "string"
        },
        "status": {
          "description": "Status indicates the current status of the post (e.g., \"draft\", \"published\")",
          "type": "string"
        },
        "subtitle": {
          "description": "Subtitle is an optional subtitle for the post",
          "type": "string"
        },
        "title": {
          "description": "Title is the main title of the post",
          "type": "string"
        },
        "type": {
          "description": "Type indicates the type of post (e.g., \"article\", \"news\", \"blog\")",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the post was last updated",
          "type": "string"
        }
      }
    },
    "responses.PostResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the post resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.PostResource"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.RBACPolicyCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of RBAC policy resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RBACPolicyResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.RBACPolicyCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the RBAC policy collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RBACPolicyCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RBACPolicyResource": {
      "type": "object",
      "properties": {
        "action": {
          "description": "Action is the operation or permission being granted/denied",
          "type": "string"
        },
        "object": {
          "description": "Object is the resource or entity that the policy governs access to",
          "type": "string"
        },
        "subject": {
          "description": "Subject is the entity (user, role, or group) that the policy applies to",
          "type": "string"
        }
      }
    },
    "responses.RBACPolicyResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the RBAC policy resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RBACPolicyResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RBACRoleCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of RBAC role resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RBACRoleResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.RBACRoleCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the RBAC role collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RBACRoleCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RBACRoleResource": {
      "type": "object",
      "properties": {
        "role": {
          "description": "Role is the name or identifier of the role",
          "type": "string"
        }
      }
    },
    "responses.RBACUserCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of RBAC user resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RBACUserResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.RBACUserCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the RBAC user collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RBACUserCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RBACUserResource": {
      "type": "object",
      "properties": {
        "user": {
          "description": "User is the name or identifier of the user",
          "type": "string"
        }
      }
    },
    "responses.RoleCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of role resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RoleResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.RoleCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the role collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RoleCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RoleResource": {
      "type": "object",
      "properties": {
        "created_at": {
          "description": "CreatedAt is the timestamp when the role was created",
          "type": "string"
        },
        "created_by": {
          "description": "CreatedBy is the ID of the user who created the role",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the role was soft-deleted",
          "type": "string"
        },
        "deleted_by": {
          "description": "DeletedBy is the optional ID of the user who deleted the role",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional description of the role's purpose",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the role",
          "type": "string"
        },
        "is_active": {
          "description": "IsActive indicates whether the role is currently active and usable",
          "type": "boolean"
        },
        "is_active_role": {
          "description": "IsActiveRole indicates whether the role is currently active and usable",
          "type": "boolean"
        },
        "is_deleted": {
          "description": "Computed fields for easy status checking\nIsDeleted indicates whether the role has been soft-deleted",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the display name of the role",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the role name",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the role was last updated",
          "type": "string"
        },
        "updated_by": {
          "description": "UpdatedBy is the ID of the user who last updated the role",
          "type": "string"
        }
      }
    },
    "responses.RoleResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the role resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RoleResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RoleUserCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of role-user relationship resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RoleUserResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.RoleUserCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the role-user relationship collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RoleUserCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.RoleUserResource": {
      "type": "object",
      "properties": {
        "role": {
          "description": "Role contains optional role information if the role entity is provided",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RoleResource"
            }
          ]
        },
        "role_id": {
          "description": "RoleID is the unique identifier for the role in the relationship",
          "type": "string"
        },
        "user": {
          "description": "User contains optional user information if the user entity is provided",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserResource"
            }
          ]
        },
        "user_id": {
          "description": "UserID is the unique identifier for the user in the relationship",
          "type": "string"
        }
      }
    },
    "responses.SuccessResponse": {
      "type": "object",
      "properties": {
        "data": {},
        "message": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "responses.TagCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of tag resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.TagResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.TagCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the tag collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.TagCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.TagResource": {
      "type": "object",
      "properties": {
        "color": {
          "description": "Color is the visual color identifier for the tag (e.g., hex code, color name)",
          "type": "string"
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the tag was created",
          "type": "string"
        },
        "created_by": {
          "description": "CreatedBy is the ID of the user who created the tag",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the tag was soft-deleted",
          "type": "string"
        },
        "deleted_by": {
          "description": "DeletedBy is the optional ID of the user who deleted the tag",
          "type": "string"
        },
        "description": {
          "description": "Description provides additional context about the tag's purpose",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the tag",
          "type": "string"
        },
        "is_deleted": {
          "description": "Computed fields for easy status checking\nIsDeleted indicates whether the tag has been soft-deleted",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the display name of the tag",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the tag name",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the tag was last updated",
          "type": "string"
        },
        "updated_by": {
          "description": "UpdatedBy is the ID of the user who last updated the tag",
          "type": "string"
        }
      }
    },
    "responses.TagResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the tag resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.TagResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.TaxonomyCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of taxonomy resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.TaxonomyResource"
          }
        },
        "links": {
          "description": "Links contains optional navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains optional collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.TaxonomyCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the taxonomy collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.TaxonomyCollection"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.TaxonomyResource": {
      "type": "object",
      "properties": {
        "children": {
          "description": "Children contains the nested child taxonomies",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.TaxonomyResource"
          }
        },
        "code": {
          "description": "Code is an optional code identifier for the taxonomy",
          "type": "string"
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the taxonomy was created",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the taxonomy was soft-deleted",
          "type": "string"
        },
        "description": {
          "description": "Description is an optional description of the taxonomy's purpose",
          "type": "string"
        },
        "has_children": {
          "description": "HasChildren indicates whether this taxonomy has child taxonomies",
          "type": "boolean"
        },
        "has_parent": {
          "description": "HasParent indicates whether this taxonomy has a parent taxonomy",
          "type": "boolean"
        },
        "id": {
          "description": "ID is the unique identifier for the taxonomy",
          "type": "string"
        },
        "is_root": {
          "description": "IsRoot indicates whether this taxonomy is at the root level (no parent)",
          "type": "boolean"
        },
        "level": {
          "description": "Level indicates the hierarchical level of the taxonomy (0 for root)",
          "type": "integer"
        },
        "name": {
          "description": "Name is the display name of the taxonomy",
          "type": "string"
        },
        "parent": {
          "description": "Parent contains the parent taxonomy if this is a child taxonomy",
          "allOf": [
            {
              "$ref": "#/definitions/responses.TaxonomyResource"
            }
          ]
        },
        "parent_id": {
          "description": "ParentID is the optional ID of the parent taxonomy for hierarchical structures",
          "type": "string"
        },
        "record_depth": {
          "description": "RecordDepth indicates the nesting level of the taxonomy in the tree",
          "type": "integer"
        },
        "record_left": {
          "description": "RecordLeft is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "record_right": {
          "description": "RecordRight is used for nested set model operations (tree structure)",
          "type": "integer"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the taxonomy name",
          "type": "string"
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the taxonomy was last updated",
          "type": "string"
        }
      }
    },
    "responses.TaxonomyResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the taxonomy resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.TaxonomyResource"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.TokenResource": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "AccessToken is the JWT token used for API authentication",
          "type": "string"
        },
        "expires_in": {
          "description": "ExpiresIn indicates the number of seconds until the access token expires",
          "type": "integer"
        },
        "refresh_token": {
          "description": "RefreshToken is the token used to obtain a new access token when it expires",
          "type": "string"
        },
        "token_type": {
          "description": "TokenType specifies the type of authentication token (typically \"Bearer\")",
          "type": "string"
        }
      }
    },
    "responses.TokenResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the token resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.TokenResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.UserCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of user resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.UserResource"
          }
        },
        "links": {
          "description": "Links contains optional navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains optional collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.UserCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the user collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserCollection"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.UserMenuResponse": {
      "type": "object",
      "properties": {
        "icon": {
          "description": "Icon is the optional icon identifier for the menu item",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the menu item",
          "type": "string"
        },
        "is_active": {
          "description": "IsActive indicates whether the menu item is currently active/enabled",
          "type": "boolean"
        },
        "is_visible": {
          "description": "IsVisible indicates whether the menu item should be displayed to users",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the display name of the menu item",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the menu item name",
          "type": "string"
        },
        "url": {
          "description": "URL is the optional destination URL for the menu item",
          "type": "string"
        }
      }
    },
    "responses.UserResource": {
      "type": "object",
      "properties": {
        "avatar": {
          "description": "Avatar is an optional URL to the user's profile picture",
          "type": "string"
        },
        "created_at": {
          "description": "CreatedAt is the timestamp when the user account was created",
          "type": "string"
        },
        "deleted_at": {
          "description": "DeletedAt is the optional timestamp when the user account was soft-deleted",
          "type": "string"
        },
        "email": {
          "description": "Email is the user's email address",
          "type": "string"
        },
        "email_verified_at": {
          "description": "EmailVerifiedAt indicates when the user's email was verified",
          "type": "string"
        },
        "has_avatar": {
          "description": "HasAvatar indicates whether the user has uploaded a profile picture",
          "type": "boolean"
        },
        "id": {
          "description": "ID is the unique identifier for the user",
          "type": "string"
        },
        "is_email_verified": {
          "description": "IsEmailVerified indicates whether the user's email has been verified",
          "type": "boolean"
        },
        "is_phone_verified": {
          "description": "IsPhoneVerified indicates whether the user's phone has been verified",
          "type": "boolean"
        },
        "menus": {
          "description": "Menus contains the user's accessible menu items",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.MenuResource"
          }
        },
        "phone": {
          "description": "Phone is the user's phone number",
          "type": "string"
        },
        "phone_verified_at": {
          "description": "PhoneVerifiedAt indicates when the user's phone was verified",
          "type": "string"
        },
        "roles": {
          "description": "Roles contains the user's assigned roles for access control",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.RoleResource"
          }
        },
        "updated_at": {
          "description": "UpdatedAt is the timestamp when the user account was last updated",
          "type": "string"
        },
        "username": {
          "description": "Username is the user's chosen username for login and display",
          "type": "string"
        }
      }
    },
    "responses.UserResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the user resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserResource"
            }
          ]
        },
        "status": {
          "description": "Status indicates the success status of the operation",
          "type": "string"
        }
      }
    },
    "responses.UserResponse": {
      "type": "object",
      "properties": {
        "avatar": {
          "description": "Avatar is an optional URL to the user's profile picture",
          "type": "string"
        },
        "email": {
          "description": "Email is the user's email address",
          "type": "string"
        },
        "email_verified_at": {
          "description": "EmailVerifiedAt indicates when the user's email was verified",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the user",
          "type": "string"
        },
        "menus": {
          "description": "Menus contains the user's menus in a simplified format",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.UserMenuResponse"
          }
        },
        "phone": {
          "description": "Phone is the user's phone number",
          "type": "string"
        },
        "phone_verified_at": {
          "description": "PhoneVerifiedAt indicates when the user's phone was verified",
          "type": "string"
        },
        "roles": {
          "description": "Roles contains the user's roles in a simplified format",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.UserRoleResponse"
          }
        },
        "username": {
          "description": "Username is the user's chosen username for login",
          "type": "string"
        }
      }
    },
    "responses.UserRoleCollection": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the array of user-role relationship resources",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.UserRoleResource"
          }
        },
        "links": {
          "description": "Links contains navigation links (first, last, prev, next)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionLinks"
            }
          ]
        },
        "meta": {
          "description": "Meta contains collection metadata (pagination, counts, etc.)",
          "allOf": [
            {
              "$ref": "#/definitions/responses.CollectionMeta"
            }
          ]
        }
      }
    },
    "responses.UserRoleCollectionResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the user-role relationship collection",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserRoleCollection"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.UserRoleResource": {
      "type": "object",
      "properties": {
        "role": {
          "description": "Role contains optional role information if the role entity is provided",
          "allOf": [
            {
              "$ref": "#/definitions/responses.RoleResource"
            }
          ]
        },
        "role_id": {
          "description": "RoleID is the unique identifier for the role in the relationship",
          "type": "string"
        },
        "user": {
          "description": "User contains optional user information if the user entity is provided",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserResource"
            }
          ]
        },
        "user_id": {
          "description": "UserID is the unique identifier for the user in the relationship",
          "type": "string"
        }
      }
    },
    "responses.UserRoleResourceResponse": {
      "type": "object",
      "properties": {
        "data": {
          "description": "Data contains the user-role relationship resource",
          "allOf": [
            {
              "$ref": "#/definitions/responses.UserRoleResource"
            }
          ]
        },
        "response_code": {
          "description": "ResponseCode indicates the HTTP status code for the operation",
          "type": "integer"
        },
        "response_message": {
          "description": "ResponseMessage provides a human-readable description of the operation result",
          "type": "string"
        }
      }
    },
    "responses.UserRoleResponse": {
      "type": "object",
      "properties": {
        "description": {
          "description": "Description is an optional description of the role's purpose",
          "type": "string"
        },
        "id": {
          "description": "ID is the unique identifier for the role",
          "type": "string"
        },
        "is_active": {
          "description": "IsActive indicates whether the role is currently active and usable",
          "type": "boolean"
        },
        "name": {
          "description": "Name is the display name of the role",
          "type": "string"
        },
        "slug": {
          "description": "Slug is the URL-friendly version of the role name",
          "type": "string"
        }
      }
    },
    "responses.ValidationError": {
      "type": "object",
      "properties": {
        "field": {
          "description": "Field is the name of the form field that failed validation",
          "type": "string"
        },
        "message": {
          "description": "Message is the human-readable error message describing the validation failure",
          "type": "string"
        },
        "value": {
          "description": "Value is the optional invalid value that caused the validation failure",
          "type": "string"
        }
      }
    },
    "responses.ValidationErrorResponse": {
      "type": "object",
      "properties": {
        "errors": {
          "description": "Errors contains the collection of field-specific validation errors",
          "type": "array",
          "items": {
            "$ref": "#/definitions/responses.ValidationError"
          }
        },
        "message": {
          "description": "Message provides a general description of the validation failure",
          "type": "string"
        },
        "status": {
          "description": "Status indicates the response status (typically \"error\" for validation failures)",
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "BearerAuth": {
      "description": "Type \"Bearer\" followed by a space and JWT token.",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}
